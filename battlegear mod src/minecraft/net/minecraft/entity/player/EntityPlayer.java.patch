--- 
+++ 
@@ -7,6 +7,11 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+
+import mods.battlegear2.common.BattleGear;
+import mods.battlegear2.common.BattlegearPacketHandeler;
+import mods.battlegear2.common.inventory.InventoryPlayerBattle;
+import mods.battlegear2.common.utils.BattlegearUtils;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
 import net.minecraft.block.material.Material;
@@ -39,6 +44,7 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
+import net.minecraft.network.packet.Packet18Animation;
 import net.minecraft.potion.Potion;
 import net.minecraft.scoreboard.Score;
 import net.minecraft.scoreboard.ScoreObjective;
@@ -64,6 +70,7 @@
 import net.minecraft.util.Vec3;
 import net.minecraft.world.EnumGameType;
 import net.minecraft.world.World;
+import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.IChunkProvider;
 
 import net.minecraftforge.common.ForgeHooks;
@@ -80,10 +87,105 @@
 
 public abstract class EntityPlayer extends EntityLiving implements ICommandSender
 {
+	/*
+	 * Mine & Blade: Notes
+	 * Edits made by: nerd-boy
+	 * 
+	 * Edits: 3
+	 * Added Methods: 6
+	 * Added Fields: 4
+	 * 
+	 * Adding methods and fields is relatively easy. Some of the methods provided are not needed,
+	 * they do however provide more simple access.
+	 * 
+	 * The only other edit is to replace the instance of Inventory player with the custom Inventory class.
+	 * It has also been marked as private to prevent other mods changing this later.
+	 */
+	
+	//-----MB-addFilds-----
+    public float offHandSwingProgress;
+    public float prevOffHandSwingProgress;
+    public int offHandSwingProgressInt;
+    public boolean isOffHandSwingInProgress;
+    
+    //-----MB-AddMethod-----
+    public void attackTargetEntityWithCurrentOffItem(Entity target){
+    	inventory.currentItem = inventory.currentItem+InventoryPlayerBattle.WEAPON_SETS;
+    	attackTargetEntityWithCurrentItem(target);
+    	inventory.currentItem = inventory.currentItem-InventoryPlayerBattle.WEAPON_SETS;
+    }
+    
+    //-----MB-AddMethod-----
+    public void swingOffItem()
+    {
+        if (!this.isOffHandSwingInProgress || this.offHandSwingProgressInt>= this.getArmSwingAnimationEndCopy() / 2 || this.offHandSwingProgressInt < 0)
+        {
+            this.offHandSwingProgressInt = -1;
+            this.isOffHandSwingInProgress = true;
+
+        }
+    }
+    
+    //-----MB-AddMethod-----
+    public float getOffSwingProgress(float frame)
+    {
+        float diff = this.offHandSwingProgress - this.prevOffHandSwingProgress;
+
+        if (diff < 0.0F)
+        {
+            ++diff;
+        }
+
+        return this.prevOffHandSwingProgress + diff * frame;
+    }
+    
+    //-----MB-AddMethod-----
+    private int getArmSwingAnimationEndCopy()
+    {
+        return this.isPotionActive(Potion.digSpeed) ? 6 - (1 + this.getActivePotionEffect(Potion.digSpeed).getAmplifier()) * 1 : (this.isPotionActive(Potion.digSlowdown) ? 6 + (1 + this.getActivePotionEffect(Potion.digSlowdown).getAmplifier()) * 2 : 6);
+    }
+    
+    
+    //-----MB-AddMethod----- (Overridden)
+    @Override
+	protected void updateArmSwingProgress() {
+		super.updateArmSwingProgress();
+		
+		this.prevOffHandSwingProgress = this.offHandSwingProgress;
+		
+		int var1 = this.getArmSwingAnimationEndCopy();
+
+        if (this.isOffHandSwingInProgress)
+        {
+            ++this.offHandSwingProgressInt;
+
+            if (this.offHandSwingProgressInt >= var1)
+            {
+                this.offHandSwingProgressInt = 0;
+                this.isOffHandSwingInProgress = false;
+            }
+        }
+        else
+        {
+            this.offHandSwingProgressInt = 0;
+        }
+
+        this.offHandSwingProgress = (float)this.offHandSwingProgressInt / (float)var1;
+	}
+    
+    //-----MB-AddMethod-----
+    public boolean isBattlemode(){
+    	return ((InventoryPlayerBattle)inventory).isBattlemode();
+    }
+    
+	
+	
     public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
 
+    
     /** Inventory of the player */
-    public InventoryPlayer inventory = new InventoryPlayer(this);
+    //-----MB-Edit Access-----
+    public final InventoryPlayer inventory = new InventoryPlayerBattle(this);
     private InventoryEnderChest theInventoryEnderChest = new InventoryEnderChest();
 
     /**
@@ -196,7 +298,7 @@
     public int getMaxHealth()
     {
         return 20;
-    }
+    }	
 
     protected void entityInit()
     {
@@ -465,11 +567,12 @@
 
             if (itemstack != this.itemInUse || itemstack != null && itemstack.stackSize != i)
             {
-                this.inventory.mainInventory[this.inventory.currentItem] = itemstack;
+            	//-----MB-Edited-----
+            	BattlegearUtils.setPlayerCurrentItem(this, itemstack);
 
                 if (itemstack.stackSize == 0)
                 {
-                    this.inventory.mainInventory[this.inventory.currentItem] = null;
+                	BattlegearUtils.setPlayerCurrentItem(this, null);
                 }
             }
 
@@ -2330,7 +2433,8 @@
     {
         if (par1 == 0)
         {
-            this.inventory.mainInventory[this.inventory.currentItem] = par2ItemStack;
+        	//-----MB-Edited-----
+        	BattlegearUtils.setPlayerCurrentItem(this, par2ItemStack);
         }
         else
         {
